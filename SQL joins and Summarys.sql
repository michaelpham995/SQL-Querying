--1
SELECT p.FIRST_NAME || ' ' ||  p.LAST_NAME AS FULL_NAME, pp.PHONE_TYPE, pp.PHONE
FROM PATRON p INNER JOIN PATRON_PHONE pp
    ON p.PATRON_ID = pp.PATRON_ID
ORDER BY LAST_NAME ASC, PHONE_TYPE DESC;

--2
SELECT FIRST_NAME, LAST_NAME, EMAIL, ACCRUED_FEES
FROM PATRON p INNER JOIN LOCATION l
    ON p.ZIP = l.ZIP
WHERE ACCRUED_FEES > 0 AND PRIMARY_BRANCH = 5
ORDER BY ACCRUED_FEES DESC;

--3
SELECT TITLE, NUMBER_OF_PAGES, FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME
FROM AUTHOR a 
    FULL JOIN TITLE_AUTHOR_LINKING ta 
        ON a.AUTHOR_ID = ta.AUTHOR_ID
    FULL JOIN TITLE t
        ON ta.TITLE_ID = t.TITLE_ID
WHERE GENRE = 'FIC' AND FORMAT = 'B'
ORDER BY LAST_NAME, TITLE;

--4
SELECT TITLE, FORMAT, GENRE, HOLD_ID
FROM TITLE t RIGHT JOIN PATRON_TITLE_HOLDS pth
    ON t.TITLE_ID = pth.TITLE_ID
ORDER BY GENRE ASC, TITLE ASC;
    
--5
SELECT TITLE, FIRST_NAME, LAST_NAME, HOLD_ID
FROM TITLE t 
    FULL JOIN PATRON_TITLE_HOLDS pth
        ON t.TITLE_ID = pth.TITLE_ID
    FULL JOIN PATRON p
        ON pth.PATRON_ID = p.PATRON_ID
WHERE GENRE = 'SCI';

--6
SELECT 'College' AS READING_LEVEL, TITLE, PUBLISHER, NUMBER_OF_PAGES, GENRE, FORMAT
FROM TITLE
WHERE NUMBER_OF_PAGES > 700 AND (FORMAT = 'B' OR FORMAT = 'E')
UNION
SELECT 'High School' AS READING_LEVEL, TITLE, PUBLISHER, NUMBER_OF_PAGES, GENRE, FORMAT
FROM TITLE
WHERE NUMBER_OF_PAGES < 700 AND NUMBER_OF_PAGES > 250 AND (FORMAT = 'B' OR FORMAT = 'E')
UNION
SELECT 'Middle School' AS READING_LEVEL, TITLE, PUBLISHER, NUMBER_OF_PAGES, GENRE, FORMAT
FROM TITLE
WHERE NUMBER_OF_PAGES <= 250 AND (FORMAT = 'B' OR FORMAT = 'E')
ORDER BY READING_LEVEL, TITLE;

--7
SELECT COUNT(*) PATRON_ID, COUNT (DISTINCT ZIP) AS DISTINCT_ZIPCODES,
MIN(ACCRUED_FEES) AS LOWEST_FEES, ROUND(AVG(ACCRUED_FEES), 2) AS AVERAGE_FEES,
MAX(ACCRUED_FEES) AS HIGHEST_FEES
FROM PATRON;

--8
SELECT BRANCH_NAME,
COUNT (PRIMARY_BRANCH) AS PATRON_COUNT
FROM LOCATION l FULL JOIN PATRON p
    ON l.BRANCH_ID = p.PRIMARY_BRANCH
GROUP BY BRANCH_NAME;

--9
SELECT ZIP, ROUND(AVG(ACCRUED_FEES), 2) AS AVERAGE_ACCURED_FEES
FROM PATRON p FULL JOIN CHECKOUTS c
    ON p.PATRON_ID = c.PATRON_ID
GROUP BY ZIP
ORDER BY AVERAGE_ACCURED_FEES DESC;

--10
SELECT BRANCH_NAME, ROUND(AVG(SYSDATE - DUE_BACK_DATE), 0) AS AVG_DAYS_OVERDUE 
FROM LOCATION l FULL JOIN PATRON p
    ON l.BRANCH_ID = p.PRIMARY_BRANCH
    FULL JOIN CHECKOUTS c
        ON p.PATRON_ID = c.PATRON_ID
WHERE (SYSDATE - DUE_BACK_DATE) > 0 AND DATE_IN IS NULL
GROUP BY BRANCH_NAME
HAVING ROUND(AVG(SYSDATE - DUE_BACK_DATE), 0) >= 10;



--11
SELECT TITLE, GENRE, COUNT (tal.TITLE_ID) AS AUTHOR_COUNT
FROM AUTHOR a FULL JOIN TITLE_AUTHOR_LINKING tal
    ON a.AUTHOR_ID = tal.AUTHOR_ID
    FULL JOIN TITLE t
        ON tal.TITLE_ID = t.TITLE_ID
GROUP BY TITLE, GENRE, FORMAT
HAVING COUNT (tal.TITLE_ID) > 1;

--12
SELECT TITLE, GENRE, COUNT (*) AS AUTHOR_COUNT
FROM AUTHOR a FULL JOIN TITLE_AUTHOR_LINKING tal
    ON a.AUTHOR_ID = tal.AUTHOR_ID
    FULL JOIN TITLE t
        ON tal.TITLE_ID = t.TITLE_ID
WHERE LAST_NAME LIKE '%PhD'
GROUP BY TITLE, GENRE, FORMAT
HAVING COUNT (tal.TITLE_ID) > 1;



--13 Part A
SELECT CITY, ROUND(AVG(ACCRUED_FEES), 2) AS AVERAGE_ACCURED_FEES
FROM PATRON
GROUP BY ROLLUP(CITY);
-- The output displays that Patrons from Guillory show 0.58 average accrued fees,
-- while patrons in West Guillory have an average of 2.42 in accrued fees, and
-- overall patrons owe 0.76 in accrued fees, including those with a null location.
-- Patrons in West Guillory on average have higher accrued fees than the average person
-- and patrons in Guillory have lower accrued fees than the average person. 



--13 Part B
SELECT CITY, ZIP, ROUND(AVG(ACCRUED_FEES), 2) AS AVERAGE_ACCURED_FEES
FROM PATRON
WHERE ACCRUED_FEES > 0
GROUP BY ROLLUP(CITY, ZIP);
--Zip Code 73940 are the most problematic as they owe 7.25 on average in accrued fees if they owe more than 0.
--Zip Code 73946 are the second to most problematic as they owe 2.32 on average in accrued fees if they owe more than 0. 


--14
SELECT BRANCH_ID, BRANCH_NAME, COUNT (LAST_LOCATION) AS COUNT_OF_TITLE_COPIES
FROM LOCATION l FULL JOIN TITLE_LOC_LINKING tol
    ON l.BRANCH_ID = tol.LAST_LOCATION
GROUP BY BRANCH_ID, BRANCH_NAME
HAVING COUNT (LAST_LOCATION) NOT BETWEEN 40 AND 50; 


